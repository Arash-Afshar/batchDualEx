#define WORD 16
#define COMD 4
#define ADDR 4
#define INPS COMD + 2*ADDR + 2*WORD + ADDR + WORD
#define OUTS ADDR + WORD + WORD + ADDR
#define DUMMYLOC 1
/*---- input: command + 2 * arguments + 2 * the value of the position the argument is pointing at + pc + last read data ----*/
/*---- output: new pc + last read data + write data + write address ----*/
/*---- dummyloc is the place where we write we don't actually want to write anything! ---*/

#parties 2

#input 1 inputlen
#output 1 outputlen

typedef uint_t INPS inputlen
typedef uint_t OUTS outputlen
typedef uint_t COMD command
typedef uint_t WORD data
typedef uint_t ADDR address

function void main()
{
    command com   = input1{0                             :COMD};
    address arg1  = input1{COMD                          :ADDR};
    address arg2  = input1{COMD+ADDR                     :ADDR};
    data    inp1  = input1{COMD+ADDR+ADDR                :WORD};
    data    inp2  = input1{COMD+ADDR+ADDR+WORD           :WORD};
    address pc    = input1{COMD+ADDR+ADDR+WORD+WORD      :ADDR};
    data    rdata = input1{COMD+ADDR+ADDR+WORD+WORD+ADDR :WORD};

    address newPC    = pc + 1;
    data    newRdata = rdata;
    data    writeVAL = 0;
    address writeLOC = DUMMYLOC;

    if (com == 0){ /* JMP */
        newPC = arg1;
    }else if (com == 1){ /* JLT */
        if (rdata < 0){
            newPC = arg1;
        }
    }else if (com == 2){ /* JGT */
        if (rdata > 0){
            newPC = arg1;
        }
    }else if (com == 3){ /* JEQ */
        if (rdata == 0){
            newPC = arg1;
        }
    }else if (com == 4){ /* JNE */
        if (rdata != 0){
            newPC = arg1;
        }
    }else if (com == 5){ /* ADD */
        newRdata = inp1 + inp2;
    }else if (com == 6){ /* SUB */
        newRdata = inp1 - inp2;
    }else if (com == 7){ /* HLT */
        /* do nothing */
    }else if (com == 8){ /* MOV */
        writeLOC = arg1;
        writeVAL = inp2;
    }else if (com == 9){ /* DRF */
        newRdata = inp1;
    }

    output1{0             :ADDR} = newPC;
    output1{ADDR          :WORD} = newRdata;
    output1{ADDR+WORD     :WORD} = writeVAL;
    output1{ADDR+WORD+WORD:ADDR} = writeLOC;
}

