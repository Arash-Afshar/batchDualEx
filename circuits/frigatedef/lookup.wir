#define N    16
#define LOGN 4
#define ADDR 4
#define WORD 16
#define Z    4
#define INPS 3 * LOGN + N * LOGN * 2
#define OUTS 2 * LOGN + N * LOGN * 2

#parties 2

typedef uint_t INPS inputsize
typedef uint_t OUTS outputsize
typedef uint_t ADDR address
typedef uint_t 1    bit
typedef uint_t 16   uint

#input 1 inputsize
#output 1 outputsize


typedef struct_t entry{
    address addr;
    address leaf;
}


function void main()
{

    address newLeafAddr  = input1{0:ADDR} ^ input1{ADDR:ADDR};
    address lookingFor   = input1{ADDR + ADDR : ADDR};
    uint    offset       = 3 * ADDR;
    uint    outputOffset = ADDR;

    for(uint i=0; i < N; i++){
        output1{outputOffset:ADDR} = input1{offset:ADDR};
        if (input1{offset:ADDR} == lookingFor){
            output1{outputOffset + ADDR:ADDR} = newLeafAddr;
            output1{0:ADDR} = input1{offset + ADDR:ADDR};
        } else{
            output1{outputOffset + ADDR:ADDR} = input1{offset + ADDR:ADDR};
        }
        offset = offset + 2 * ADDR;
        outputOffset = outputOffset + 2 * ADDR;
    }
}
