#Generated by VisualGDB project wizard. 
#Note: VisualGDB will automatically update this file when you add new sources to the project.
#All other changes you make in this file will be preserved.
#Visit http://visualgdb.com/makefiles for more details

#VisualGDB: AutoSourceFiles		#<--- remove this line to disable auto-updating of SOURCEFILES and EXTERNAL_LIBS

TARGETNAME := LinuxFrontEnd
#TARGETTYPE can be APP, STATIC or SHARED
TARGETTYPE := APP

to_lowercase = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))

CONFIG ?= RELEASE

CONFIGURATION_FLAGS_FILE := $(call to_lowercase,$(CONFIG)).mak

include $(CONFIGURATION_FLAGS_FILE)

#LINKER_SCRIPT defined inside the configuration file (e.g. debug.mak) should override any linker scripts defined in shared .mak files
CONFIGURATION_LINKER_SCRIPT := $(LINKER_SCRIPT)

include $(ADDITIONAL_MAKE_FILES)

ifneq ($(CONFIGURATION_LINKER_SCRIPT),)
LINKER_SCRIPT := $(CONFIGURATION_LINKER_SCRIPT)
endif

ifneq ($(LINKER_SCRIPT),)
LDFLAGS += -T$(LINKER_SCRIPT)
endif

ifeq ($(BINARYDIR),)
error:
	$(error Invalid configuration, please check your inputs)
endif

SOURCEFILES := FrontEnd/ezOptionParser.cpp FrontEnd/Main.cpp FrontEnd/UnitTests.cpp
EXTERNAL_LIBS := 
EXTERNAL_LIBS_COPIED := $(foreach lib, $(EXTERNAL_LIBS),$(BINARYDIR)/$(notdir $(lib)))

CFLAGS += $(COMMONFLAGS)
CXXFLAGS += $(COMMONFLAGS)
ASFLAGS += $(COMMONFLAGS)
LDFLAGS += $(COMMONFLAGS)

CFLAGS += $(addprefix -I,$(INCLUDE_DIRS)) -std=c++11 
CXXFLAGS += $(addprefix -I,$(INCLUDE_DIRS)) -std=c++11 

CFLAGS += $(addprefix -D,$(PREPROCESSOR_MACROS))
CXXFLAGS += $(addprefix -D,$(PREPROCESSOR_MACROS))
ASFLAGS += $(addprefix -D,$(PREPROCESSOR_MACROS))

CXXFLAGS += $(addprefix -framework ,$(MACOS_FRAMEWORKS))
CFLAGS += $(addprefix -framework ,$(MACOS_FRAMEWORKS))
LDFLAGS += $(addprefix -framework ,$(MACOS_FRAMEWORKS))

##########################################################################################

ROOT=

SRC=.

TPL=thirdparty/linux
BOOST=thirdparty/linux/boost


libBDX_LIB=$(BINARYDIR)/liblibBDX.a 
libBDXTESTS_LIB=$(BINARYDIR)/liblibBDXTests.a

LDFLAGS += -L$(BINARYDIR)

libBDX_DIR=$(SRC)/libBDX
libBDXTESTS_DIR=$(SRC)/libBDXTests

libBDX_SRC=\
	$(wildcard $(libBDX_DIR)/Common/*.cpp) \
	$(wildcard $(libBDX_DIR)/Network/*.cpp) \
	$(wildcard $(libBDX_DIR)/Circuit/*.cpp) \
	$(wildcard $(libBDX_DIR)/Crypto/*.cpp) \
	$(wildcard $(libBDX_DIR)/DualEx/*.cpp) \
	$(wildcard $(libBDX_DIR)/OT/*.cpp) \
	$(wildcard $(libBDX_DIR)/OT/Math/*.cpp) \
	$(wildcard $(libBDX_DIR)/PSI/*.cpp) 


libBDX_OBJ=$(addprefix $(BINARYDIR)/,$(libBDX_SRC:.cpp=.o)) 
libBDX_H=$(libBDX_SRC:.cpp=.h)

libBDXTESTS_SRC=$(wildcard $(libBDXTESTS_DIR)/*.cpp) 
libBDXTESTS_OBJ=$(addprefix $(BINARYDIR)/,$(libBDXTESTS_SRC:.cpp=.o))
libBDXTESTS_H=$(libBDXTESTS_SRC:.cpp=.h)

INC=-I./libBDX/\
    -I./libBDXTests/\
    -I$(TPL)\
    -I$(TPL)/ntl/include/\
    -I$(BOOST)/includes/\
    -I$(TPL)/miracl/

TPL_LIB=$(BOOST)/stage/lib/libboost_system.a\
	$(BOOST)/stage/lib/libboost_thread.a\
	$(BOOST)/stage/lib/libboost_filesystem.a\
	$(TPL)/miracl/miracl/source/libmiracl.a\
	$(TPL)/cryptopp/libcryptopp.a\
	$(TPL)/mpir/.libs/libmpir.a\
	$(TPL)/ntl/src/libntl.a

LIB=\
	$(TPL_LIB)\
	-lpthread\
	-lrt

EXPORTHEADS=$(libBDX_H) $(libBDXTESTS_H)


CFLAGS += $(INC)   -Wall -std=c++11 -maes -msse2 -msse4.1 -mpclmul -Wfatal-errors -pthread 
CXXFLAGS += $(INC) -Wall -std=c++11 -maes -msse2 -msse4.1 -mpclmul -Wfatal-errors -pthread 

#CFLAGS +=    $(EXPORTHEADS) $(libBDXTESTS_H)
#CXXFLAGS += $(EXPORTHEADS) $(libBDXTESTS_H)


##########################################################################################


LDFLAGS += $(addprefix -L,$(LIBRARY_DIRS))

ifeq ($(GENERATE_MAP_FILE),1)
LDFLAGS += -Wl,-Map=$(BINARYDIR)/$(basename $(TARGETNAME)).map
endif

LIBRARY_LDFLAGS = $(LIB)
#$(addprefix -l,$(LIBRARY_NAMES))

ifeq ($(IS_LINUX_PROJECT),1)
	RPATH_PREFIX := -Wl,--rpath='$$ORIGIN/../
	LIBRARY_LDFLAGS += $(EXTERNAL_LIBS)
	LIBRARY_LDFLAGS += -Wl,--rpath='$$ORIGIN'
	LIBRARY_LDFLAGS += $(addsuffix ',$(addprefix $(RPATH_PREFIX),$(dir $(EXTERNAL_LIBS))))

	ifeq ($(TARGETTYPE),SHARED)
		CFLAGS += -fPIC
		CXXFLAGS += -fPIC
		ASFLAGS += -fPIC
		LIBRARY_LDFLAGS += -Wl,-soname,$(TARGETNAME)
	endif

	ifneq ($(LINUX_PACKAGES),)
		PACKAGE_CFLAGS := $(foreach pkg,$(LINUX_PACKAGES),$(shell pkg-config --cflags $(pkg)))
		PACKAGE_LDFLAGS := $(foreach pkg,$(LINUX_PACKAGES),$(shell pkg-config --libs $(pkg)))
		CFLAGS += $(PACKAGE_CFLAGS)
		CXXFLAGS += $(PACKAGE_CFLAGS)
		LIBRARY_LDFLAGS += $(PACKAGE_LDFLAGS)
	endif	
else
	LIBRARY_LDFLAGS += $(EXTERNAL_LIBS)  
endif

LIBRARY_LDFLAGS += $(ADDITIONAL_LINKER_INPUTS)

all_make_files := $(firstword $(MAKEFILE_LIST)) $(CONFIGURATION_FLAGS_FILE) $(ADDITIONAL_MAKE_FILES)

ifeq ($(STARTUPFILES),)
	all_source_files := $(SOURCEFILES) 
else
	all_source_files := $(STARTUPFILES) $(filter-out $(STARTUPFILES),$(SOURCEFILES))
endif

source_obj1 := $(all_source_files:.cpp=.o)
source_obj2 := $(source_obj1:.c=.o)
source_obj3 := $(source_obj2:.s=.o)
source_obj4 := $(source_obj3:.S=.o)
source_obj5 := $(source_obj4:.cc=.o)
source_objs := $(source_obj5:.cxx=.o)

all_objs := $(addprefix $(BINARYDIR)/, $(notdir $(source_objs))) 

PRIMARY_OUTPUTS :=

ifeq ($(GENERATE_BIN_FILE),1)
PRIMARY_OUTPUTS += $(BINARYDIR)/$(basename $(TARGETNAME)).bin
endif

ifeq ($(GENERATE_IHEX_FILE),1)
PRIMARY_OUTPUTS += $(BINARYDIR)/$(basename $(TARGETNAME)).ihex
endif

ifeq ($(PRIMARY_OUTPUTS),)
PRIMARY_OUTPUTS := $(BINARYDIR)/$(TARGETNAME)
endif

all: $(PRIMARY_OUTPUTS)

$(BINARYDIR)/$(basename $(TARGETNAME)).bin: $(BINARYDIR)/$(TARGETNAME)
	$(OBJCOPY) -O binary $< $@

$(BINARYDIR)/$(basename $(TARGETNAME)).ihex: $(BINARYDIR)/$(TARGETNAME)
	$(OBJCOPY) -O ihex $< $@

ifeq ($(TARGETTYPE),APP)
$(BINARYDIR)/$(TARGETNAME): $(all_objs) $(EXTERNAL_LIBS) $(libBDX_LIB) $(libBDXTESTS_LIB)
	$(LD) -o $@ $(LDFLAGS) $(START_GROUP) $(all_objs) $(LIBRARY_LDFLAGS) $(libBDX_LIB) $(libBDXTESTS_LIB) $(END_GROUP)
endif

ifeq ($(TARGETTYPE),SHARED)
$(BINARYDIR)/$(TARGETNAME): $(all_objs) $(EXTERNAL_LIBS)
	$(LD) -shared -o $@ $(LDFLAGS) $(START_GROUP) $(all_objs) $(LIBRARY_LDFLAGS) $(END_GROUP)
endif

ifeq ($(TARGETTYPE),STATIC)
$(BINARYDIR)/$(TARGETNAME): $(all_objs)
	$(AR) -r $@ $^
endif

-include $(all_objs:.o=.dep)

clean: 
	rm -fr $(BINARYDIR) 

$(BINARYDIR):
	mkdir $(BINARYDIR)

#VisualGDB: FileSpecificTemplates		#<--- VisualGDB will use the following lines to define rules for source files in subdirectories
$(BINARYDIR)/%.o : %.cpp $(all_make_files) |$(BINARYDIR)
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)

$(BINARYDIR)/%.o : %.S $(all_make_files) |$(BINARYDIR)
	@mkdir -p $(dir $@)
	$(CXX) $(CFLAGS) $(ASFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)

$(BINARYDIR)/%.o : %.s $(all_make_files) |$(BINARYDIR)
	@mkdir -p $(dir $@)
	$(CXX) $(CFLAGS) $(ASFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)

$(BINARYDIR)/%.o : %.cxx $(all_make_files) |$(BINARYDIR)
	@mkdir -p $(dir $@)
	$(CXX) $(CFLAGS) $(CXXFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)

######################################## 

libBDX: $(libBDX_LIB)

libBDXTests: $(libBDXTESTS_LIB)

$(libBDX_LIB): $(libBDX_OBJ) | $(BINARYDIR)
	$(AR) $(ARFLAGS) $@ $(libBDX_OBJ) 

$(libBDXTESTS_LIB): $(libBDXTESTS_OBJ) | $(BINARYDIR)
	$(AR) $(ARFLAGS) $@ $(libBDXTESTS_OBJ)


#VisualGDB: GeneratedRules				#<--- All lines below are auto-generated


$(BINARYDIR)/ezOptionParser.o : FrontEnd/ezOptionParser.cpp $(all_make_files) |$(BINARYDIR)
	$(CXX) $(CXXFLAGS)  -c $< -o $@ -MD -MF $(@:.o=.dep)


$(BINARYDIR)/Main.o : FrontEnd/Main.cpp $(all_make_files)  |$(BINARYDIR) 
	$(CXX) $(CXXFLAGS)  $(LIB) -c $< -o $@ -MD -MF $(@:.o=.dep)


$(BINARYDIR)/UnitTests.o : FrontEnd/UnitTests.cpp $(all_make_files) |$(BINARYDIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@ -MD -MF $(@:.o=.dep)

